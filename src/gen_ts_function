#!/usr/bin/env bash

open_in_editor=false
update_barrel=false
gen_spec=false

options=$(getopt -o b,g,s,o --long update-barrel,git-add,spec,open -- "$@") || exit
eval set -- "$options"

while true; do
  case "$1" in
  -b | --update-barrel)
    update_barrel=true
    shift 1
    ;;
  -g | --git-add)
    repo_path=$(git rev-parse --show-toplevel) || exit
    shift 1
    ;;
  -s | --spec)
    gen_spec=true
    shift 1
    ;;
  -o | --open)
    open_in_editor=true
    shift 1
    ;;
  --)
    shift
    break
    ;;
  *)
    echo "Internal error!"
    exit 1
    ;;
  esac
done

function_full=${1:?"function name is required"}
function_path="$(dirname "$function_full")"
function_name="$(basename "$function_full")"

add_if_in_repo() {
  local file_name="$1"

  if [ "$repo_path" ]; then
    git add "$file_name"
  fi
}

mkdir -p "$function_path"

cat <<TS_FUNCTION >"$function_full.ts"
export const $function_name = () => {
  //
}
TS_FUNCTION

add_if_in_repo "$function_full.ts"

if [ "$update_barrel" = true ]; then
  index_file="$function_path/index.ts"
  if [ -f "$index_file" ]; then
    export_text="export * from './$function_name'"

    if ! grep -qF "$export_text" "$index_file"; then
      echo "$export_text;" >>"$index_file"
    fi
  fi
fi

if [ "$gen_spec" = true ]; then
  if [ "$repo_path" ]; then
    add_flag="-g"
  fi

  repo_path=$(git rev-parse --show-toplevel) || exit
  test_dir="$repo_path/test/$(realpath "$PWD" --relative-to="$repo_path")"

  (cd "$test_dir" && gen_ts_function_spec $add_flag "$function_full")
fi

if [ "$open_in_editor" = true ]; then
  idea64.exe "$function_full.ts"
fi
